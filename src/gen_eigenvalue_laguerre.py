import jax.numpy as jnp
def gen_eigenvalue_laguerre(R1a, R2a, dwa, R1b, R2b, k, f, dwb, offset, power, B0, gamma, tp):
    x0 = gamma**2
    x1 = power**2
    x2 = x0*x1
    x3 = (-B0*dwa*gamma + B0*gamma*offset)**2
    x4 = (x2 + x3)**(-1.0)
    x5 = gamma**4
    x6 = power**4*x5
    x7 = R2b*x6
    x8 = f*k
    x9 = f**3
    x10 = R2b**2
    x11 = k**3
    x12 = x10*x11
    x13 = x12*x9
    x14 = x11*x2
    x15 = f*x14
    x16 = B0**4*x5
    x17 = offset**4*x16
    x18 = R1b*x17
    x19 = k**2
    x20 = x19*x2
    x21 = R1b*x20
    x22 = f*x21
    x23 = x10*x2
    x24 = R1b*x23
    x25 = x14*x9
    x26 = f*x19
    x27 = f**2
    x28 = 2*x27
    x29 = dwa**2
    x30 = R1b*x11
    x31 = f*x30
    x32 = B0**2
    x33 = x0*x32
    x34 = x31*x33
    x35 = offset**2
    x36 = 2*dwa
    x37 = offset*x36
    x38 = offset**3*x16
    x39 = 2*f
    x40 = k*x39
    x41 = x38*x40
    x42 = dwa*x41
    x43 = dwb*x41
    x44 = x10*x33
    x45 = x29*x44
    x46 = R1b*x45
    x47 = x35*x44
    x48 = R1b*x47
    x49 = dwb**2
    x50 = x1*x32*x5
    x51 = x49*x50
    x52 = R1b*x51
    x53 = x35*x50
    x54 = R1b*x53
    x55 = x29*x50
    x56 = R2b*x55
    x57 = R2b*x53
    x58 = x16*x29
    x59 = x49*x58
    x60 = R1b*x59
    x61 = x35*x58
    x62 = R1b*x61
    x63 = x16*x49
    x64 = x35*x63
    x65 = R1b*x64
    x66 = 4*R2b
    x67 = dwa*offset
    x68 = x66*x67
    x69 = x19*x33
    x70 = R1b*x69
    x71 = f*x70
    x72 = x40*x67
    x73 = x44*x72
    x74 = dwb*offset
    x75 = x40*x74
    x76 = x50*x75
    x77 = x50*x67
    x78 = R2b*x40
    x79 = R1b*x8
    x80 = dwa*dwb
    x81 = 4*x35
    x82 = x16*x80*x81
    x83 = x63*x72
    x84 = x58*x75
    x85 = x30*x9
    x86 = x33*x85
    x87 = x29*x70
    x88 = x39*x87
    x89 = x35*x70
    x90 = x28*x30
    x91 = x33*x90
    x92 = x33*x67
    x93 = 2*dwb
    x94 = offset*x93
    x95 = x33*x35
    x96 = R1b*x13 - R1b*x42 - R1b*x43 - R1b*x73 - R1b*x76 - R1b*x83 - R1b*x84 + R2b*x14*x28 + R2b*x15 + R2b*x22 + R2b*x25 + R2b*x39*x89 + R2b*x88 + x18*x8 - x19*x39*x50*x80 + x23*x26 + x24*x8 + x26*x51 + x26*x55 + x29*x34 + x34*x35 - x34*x37 + x35*x86 + x46*x8 + x48*x8 + x49*x86 + x52*x8 + x54*x8 + x56*x8 + x57*x8 + x60*x8 + x62*x8 + x65*x8 - x68*x71 + x7*x8 - x74*x91 - x77*x78 + x79*x82 + x80*x91 - x86*x94 - x90*x92 + x90*x95
    x97 = R2b*x11
    x98 = R1b*x66
    x99 = 3*x79
    x100 = 4*x27
    x101 = 2*x9
    x102 = x10*x19
    x103 = 6*x27
    x104 = R1b*R2b
    x105 = 2*R2b
    x106 = R1b*x2
    x107 = x105*x106
    x108 = 2*k
    x109 = k*x66
    x110 = 3*x27
    x111 = x102*x110
    x112 = 5*R2b
    x113 = x36*x38
    x114 = x38*x93
    x115 = f*x20
    x116 = R1b*x33
    x117 = x116*x67
    x118 = k*x92
    x119 = x105*x116
    x120 = x119*x29
    x121 = x119*x35
    x122 = x108*x116
    x123 = x109*x33
    x124 = x37*x44
    x125 = 6*x69
    x126 = x125*x67
    x127 = x37*x50
    x128 = x50*x94
    x129 = x37*x63
    x130 = x58*x94
    x131 = x29*x33
    x132 = x33*x79
    x133 = 3*x69
    x134 = x110*x20
    x135 = x39*x69
    x136 = f*x125
    x137 = x135*x29
    x138 = x103*x74
    x139 = x110*x69
    x140 = k*x6
    x141 = k*x17
    x142 = k*x23
    x143 = x11*x33
    x144 = x143*x29
    x145 = x143*x35
    x146 = k*x45
    x147 = k*x47
    x148 = k*x55
    x149 = k*x51
    x150 = k*x59
    x151 = k*x61
    x152 = k*x64
    x153 = x68*x69
    x154 = x143*x80
    x155 = x143*x67
    x156 = 4*f
    x157 = x143*x74
    x158 = x105*x69
    x159 = x104*x40
    x160 = x39*x70
    x161 = x143*x49
    x162 = R1b*x111 - R1b*x113 - R1b*x114 - R1b*x124 - R1b*x128 - R1b*x129 - R1b*x130 + R1b*x82 + R2b*x134 + R2b*x135*x35 + R2b*x137 + R2b*x90 + f*x140 + f*x141 + f*x142 + f*x144 + 3*f*x145 + f*x146 + f*x147 + f*x148 + f*x149 + f*x150 + f*x151 + f*x152 - f*x153 + k*x107 - k*x113 - k*x114 + k*x120 + k*x121 - k*x124 - k*x127 - k*x128 - k*x129 - k*x130 + k*x82 - x100*x157 - x101*x157 + x105*x20 - x105*x77 + x105*x85 + x106*x78 + x108*x53 + x110*x14 + x110*x145 + x110*x49*x70 + x110*x89 + x112*x115 - x118*x98 + x12*x27 + x13 + x131*x159 - x132*x68 - x138*x70 + x14 + x140 + x141 + x142 - x143*x37 + x144 + x145*x9 + x145 + x146 + x147 + x148 + x149 + 3*x15 + x150 + x151 + x152 - x153 + x154*x28 + x154*x39 - x155*x156 - x155*x28 + x156*x89 - x157*x39 + x158*x29 + x158*x35 + x159*x95 - x160*x74 + x160*x80 + x161*x27 + x161*x9 + x18 + x21 + x22 + x24 + x25 - x37*x70 + x40*x53 - x40*x77 - x42 - x43 + x46 + x48 + x52 + x54 + x56 + x57 + x60 + x62 + x65 - 6*x67*x71 + x7 - x73 - x76 + x8*x82 - x83 - x84 + x87 + x88 + x89
    return -R1a*x3*x4 - R2a*x2*x4 - x96/(x162 - x96*(-8*R2b*x118 - f*x126 - 4*k*x117 + x10*x99 + x100*x97 + x101*x97 + x102*x39 + x103*x104*x19 + x106*x108 + x106*x8 + x107 + x109*x2 + x111 + x112*x2*x8 - x113 - x114 + 6*x115 - x117*x40 + x120 + x121 + x122*x29 + x122*x35 + x123*x29 + x123*x35 - x124 - x126 - x127 - x128 - x129 - x130 + x131*x78 + x131*x79 - 6*x132*x74 + x132*x81 + x133*x29 + x133*x35 + x134 + x135*x49 + x135*x80 + x136*x35 - x136*x74 + x137 - x138*x69 + x139*x35 + x139*x49 + x17 + 3*x20 + x23 + x26*x98 + x31 + x33*x49*x99 - x33*x68*x8 + x39*x97 + x45 + x47 + x51 + 2*x53 + x55 + x59 + x6 + x61 + x64 + x78*x95 + x82 + x85 + x90 - x92*x98)/x162)
