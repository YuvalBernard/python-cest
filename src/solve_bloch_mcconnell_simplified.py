import jax.numpy as jnp
def gen_spectrum_symbolic(R1a, R2a, dwa, R1b, R2b, k, f, dwb, offset, power, B0, gamma, tp):
    x0 = gamma**2
    x1 = power**2
    x2 = f*k
    x3 = R2a + x2
    x4 = -x3
    x5 = x4**(-1.0)
    x6 = -offset
    x7 = dwa + x6
    x8 = -x7
    x9 = x5*x8
    x10 = B0**2
    x11 = x0*x10
    x12 = x11*x7
    x13 = -x12*x9 - x3
    x14 = x13**(-1.0)
    x15 = R1a + x2
    x16 = x0*x1*x14 - x15
    x17 = x16**(-1.0)
    x18 = k**2
    x19 = f*x18
    x20 = x17*x19
    x21 = x14*x19
    x22 = x4**(-2.0)
    x23 = x22*x8
    x24 = gamma**4
    x25 = x13**(-2.0)
    x26 = R2b + k
    x27 = (f*x1*x10*x17*x18*x22*x24*x25*x7*x8 - x12*x21*x23 - x19*x5 - x26)**(-1.0)
    x28 = dwb + x6
    x29 = -x28
    x30 = B0*gamma
    x31 = x29*x30
    x32 = x30*x8
    x33 = x21*x5
    x34 = gamma**3
    x35 = x1*x34
    x36 = x20*x25
    x37 = x27*(-B0*x35*x36*x9 + x31 + x32*x33)
    x38 = B0*x7
    x39 = power*x0
    x40 = x38*x39
    x41 = x14*x40*x5
    x42 = x20*x41
    x43 = gamma*power
    x44 = x14*x43
    x45 = x20*x44 + x43
    x46 = x37*x42 + x45
    x47 = x28*x30
    x48 = x30*x7
    x49 = x35*x38
    x50 = x33*x48 - x36*x49*x5 + x47
    x51 = (f*x0*x1*x17*x18*x25 - x21 - x26 - x37*x50)**(-1.0)
    x52 = B0*x39
    x53 = x51*(-x14*x20*x27*x50*x52*x9 - x45)
    x54 = f**2
    x55 = x16**(-2.0)
    x56 = R1b + k
    x57 = R1a*x17*x2
    x58 = x41*x57
    x59 = x37*x58 + x44*x57
    x60 = (R1a*f*k*x17 - R1a*k**3*x1*x10*x23*x24*x25*x27*x54*x55*x7 - R1b*f + x53*x59)/(k**4*x1*x10*x22*x24*x25*x27*x54*x55*x7*x8 - x20 - x46*x53 - x56)
    x61 = x51*(-x46*x60 - x59)
    x62 = x17*(B0*k*power*x0*x14*x27*x5*x8*(x42*x60 - x50*x61 + x58) - R1a - k*x44*x61 - k*x60)
    x63 = x0*x1
    x64 = offset**2
    x65 = x10*x64
    x66 = x0*x65
    x67 = B0*offset
    x68 = x67*jnp.sqrt(1/(x10*x64))*(R1a*x67 + R2a*power)/jnp.sqrt(x1 + x65)
    x69 = k*x47 + k*x48
    x70 = k*x40 + x43*x69
    x71 = k + x68
    x72 = R2b + x71
    x73 = -x72
    x74 = x69*x73
    x75 = k*x73
    x76 = 2*R2b
    x77 = R1b + 3*k
    x78 = R1a + R2a + 2*x2
    x79 = 5*x68 + x76 + x77 + x78
    x80 = k*x79 + x75
    x81 = -x3 - x68
    x82 = x48*x81
    x83 = x48*x79 + x82
    x84 = k*x83 + x47*x80 + x74
    x85 = x31*x69
    x86 = x15 + x68
    x87 = -x86
    x88 = 3*x68
    x89 = x76 + x88
    x90 = x77 + x89
    x91 = x87*x90
    x92 = 4*x68
    x93 = x76 + x92
    x94 = x77 + x93
    x95 = x15 + x94
    x96 = R1b + x71
    x97 = -x96
    x98 = 2*k
    x99 = 2*x68
    x100 = x98 + x99
    x101 = x100 + x76
    x102 = x28*x29
    x103 = x102*x11
    x104 = x103 + x72*x73
    x105 = x101*x97 + x104
    x106 = 2*x19
    x107 = -2*x0*x1 + x106
    x108 = -x105 - x107 - x81*x95 - x91
    x109 = k*x108 + x73*x80 + x85
    x110 = x2*x69
    x111 = -x49
    x112 = x110 + x111
    x113 = x108*x48 + x112 + x81*x83
    x114 = k*x113 + x109*x47 - x43*x70 + x73*x84
    x115 = -x0*x1
    x116 = x105 + x115
    x117 = -x116 - x19 - x91
    x118 = k*x95 + x75
    x119 = x43*x87
    x120 = x119 + x43*x95
    x121 = -x116
    x122 = k*x97
    x123 = k*x90
    x124 = x122 + x123
    x125 = x43*x73
    x126 = -x101*x43 - x125
    x127 = x31*x73
    x128 = x127 + x31*x72
    x129 = x128*x47
    x130 = -x104
    x131 = x126*x43 + x129 + x130*x97
    x132 = x121*x87 + x124*x2 + x131
    x133 = gamma*power*x120 - x117*x81 - x118*x2 - x132
    x134 = -x132
    x135 = -x63*x98
    x136 = k*x103
    x137 = x118*x73 + x136
    x138 = k*x117 + x135 + x137
    x139 = x106*x43
    x140 = x117*x43 + x120*x87 + x139
    x141 = -x131
    x142 = -k*x63
    x143 = k*x121 + x124*x97 + x142
    x144 = x129*x73
    x145 = -power*x10*x102*x34 + x126*x73 - x130*x43
    x146 = -B0*gamma*x128*x28*x97 + x144 + x145*x43
    x147 = x141*x87 + x143*x2 + x146
    x148 = gamma*power*x140 - x134*x81 - x138*x2 - x147
    x149 = B0*x28
    x150 = x73**2
    x151 = k*x120 + x118*x43 + 2*x122*x43
    x152 = -x147*x81 + x2*(k*x134 + x138*x73 - x151*x43 + x47*(x118*x31 + x31*x75)) - x43*(x134*x43 + x140*x87 + x151*x2)
    x153 = x40*x87
    x154 = x153 + x43*x83
    x155 = R1b + R2b
    x156 = x100 + x155
    x157 = k*x156 + x122
    x158 = x157*x2
    x159 = x158 - x72*x87*x97
    x160 = x19*x43
    x161 = x15 + x98
    x162 = x155 + x161 + x88
    x163 = x119 + x162*x43
    x164 = x163*x87
    x165 = x72*x97
    x166 = x156*x87 + x165
    x167 = x166 + x19
    x168 = -x167
    x169 = x73*x96
    x170 = x43*x97
    x171 = x156*x43 + x170
    x172 = x127 + x156*x31
    x173 = x172*x47
    x174 = x123 + x75
    x175 = x103 + x115
    x176 = x156*x73 + x169 + x175
    x177 = -x176
    x178 = x129 + x130*x87
    x179 = x161 + x89
    x180 = x119 + x179*x43
    x181 = x101*x87 + x104
    x182 = -x181
    x183 = k*x179 + x75
    x184 = x2*x86 + x2*x87
    x185 = k*x184
    x186 = x19 + x86*x97
    x187 = -x186
    x188 = x15 + x56 + x99
    x189 = x170 + x188*x43
    x190 = x162*x47 + x47*x73
    x191 = x186 + x188*x73
    x192 = -x115 - x191
    x193 = -gamma*power*x189 + x185 + x187*x73
    x194 = -x125 - x43*x72
    x195 = -x165 + x63
    x196 = k*x162 + x75
    x197 = x115 + x167
    x198 = -x197
    x199 = x158 + x194*x43 + x195*x87
    x200 = x78 + x98
    x201 = x155 + x200 + x92
    x202 = x162*x81
    x203 = -x197 - x202
    x204 = -gamma*power*x163
    x205 = -x159 - x168*x81 - x204
    x206 = x3 + x94
    x207 = k*x206 + x75
    x208 = x206*x48 + x82
    x209 = k*x208 + x207*x47 + x74
    x210 = -x176 - x19 - x81*x90
    x211 = gamma*power*x171 + x150*x96 - x173 - x174*x2 - x177*x81
    x212 = x200 + x93
    x213 = k*x212 + x75
    x214 = x212*x48 + x82
    x215 = k*x214 + x213*x47 + x74
    x216 = -x115 - x179*x81 - x181 - x19
    x217 = gamma*power*x180 - x178 - x182*x81 - x183*x2
    x218 = x201*x48 + x82
    x219 = -x43*(x153 + x218*x43)
    x220 = x111 + x218*x81
    return x62 + (-x62 + x66/(x63 + x66))*jnp.exp(tp*(x68 + (-x2*(k*x148 + x114*x31 + x73*(k*x133 + x109*x73 + x31*x84)) - x32*(x114*x2 + x148*x48 - x43*(x113*x43 + x154*x87 + x2*x70) + x81*(x113*x81 + x133*x48 - x154*x43 + x2*x84)) - x81*(B0*gamma*x128*x28*x73*x97 - x129*x150 + x146*x87 - x152 - x2*(k*x141 + x143*x97 + x43*(-x124*x43 - x43*x75)) - x43*(x128*x149*x39 + x145*x73 + x47*(B0*gamma*x126*x29 - x29*x52*x73))))/(x152 + x2*(k*x205 + x73*(k*x203 + x73*(k*x201 + x75))) + x2*(k*x211 + x209*x31 + x73*(k*x210 + x207*x73 + x85)) + x2*(k*x217 + x215*x31 + x73*(k*x216 + x213*x73 + x85)) + x2*(k*(-x190*x31 - x192*x73 - x193) + x31*(x118*x47 + x47*x75) + x73*(k*(-x162*x73 - x175 - x191) + x137)) + x32*(x2*x209 + x211*x48 + x81*(x110 + x208*x81 + x210*x48)) + x32*(x205*x48 + x219 + x81*(x203*x48 + x220)) + x32*(x2*x215 + x217*x48 - x43*(x153 + x214*x43) + x81*(x112 + x214*x81 + x216*x48)) + x32*(x2*(k*x218 + x48*x75) + x219 + x48*(-x196*x2 - x198*x81 - x199 - x204) + x81*(x19*x48 + x220 + x48*(-x107 - x166 - x202))) + x81*(gamma*power*(x160 + x164 + x168*x43) + x159*x81 - x2*(-x122*x72 + x157*x97)) + x81*(gamma*power*(-x169*x43 + x171*x97) - x2*(k*x177 + x136 + x142 + x174*x73) - x47*(-x169*x31 + x172*x73) - x81*(x150*x96 + x171*x43 - x173)) + x81*(gamma*power*(x160 + x187*x43 + x189*x97) + k*x184*x73 - x185*x87 + x193*x73 - x31*(-x149*x35 + x190*x73 + x192*x47)) + x81*(B0*gamma*x128*x28*x87 + gamma*power*(x180*x87 + x182*x43) - x144 + x178*x81 - x2*(k*x182 + x136 + x183*x73)) + x81*(gamma*power*x194*x87 + gamma*power*(x139 + x164 + x198*x43) - x125*x194 + x199*x81 - x2*(k*x195 + x142 + x157*x97) - x2*(k*x198 + x135 + x196*x73)))))
