import jax.numpy as jnp
def gen_spectrum_symbolic(R1a, R2a, dwa, R1b, R2b, k, f, dwb, offset, power, B0, gamma, tp):
    x0 = gamma**2
    x1 = power**2
    x2 = f*k
    x3 = R2a + x2
    x4 = -x3
    x5 = x4**(-1.0)
    x6 = -offset
    x7 = dwa + x6
    x8 = x5*x7
    x9 = -x7
    x10 = B0**2
    x11 = x0*x10
    x12 = x11*x9
    x13 = -x12*x8 - x3
    x14 = x13**(-1.0)
    x15 = R1a + x2
    x16 = x0*x1*x14 - x15
    x17 = x16**(-1.0)
    x18 = k**2
    x19 = f*x18
    x20 = x17*x19
    x21 = f**2
    x22 = gamma**4
    x23 = k**4
    x24 = x4**(-2.0)
    x25 = x13**(-2.0)
    x26 = x16**(-2.0)
    x27 = x14*x19
    x28 = x12*x7
    x29 = R2b + k
    x30 = (f*x1*x10*x17*x18*x22*x24*x25*x7*x9 - x19*x5 - x24*x27*x28 - x29)**(-1.0)
    x31 = dwb + x6
    x32 = -x31
    x33 = B0*gamma
    x34 = x32*x33
    x35 = x27*x33
    x36 = x5*x9
    x37 = gamma**3
    x38 = x1*x20*x25*x37
    x39 = B0*x36
    x40 = x30*(x34 + x35*x36 - x38*x39)
    x41 = B0*x8
    x42 = power*x0
    x43 = x14*x42
    x44 = x41*x43
    x45 = x20*x44
    x46 = gamma*power
    x47 = x14*x46
    x48 = x20*x47 + x46
    x49 = x40*x45 + x48
    x50 = x31*x33
    x51 = x35*x8 - x38*x41 + x50
    x52 = (f*x0*x1*x17*x18*x25 - x27 - x29 - x40*x51)**(-1.0)
    x53 = x52*(-x20*x30*x39*x43*x51 - x48)
    x54 = R1a*x17*x2
    x55 = x44*x54
    x56 = x40*x55 + x47*x54
    x57 = (R1a*f*k*x17 - R1a*k**3*x1*x10*x21*x22*x24*x25*x26*x30*x7*x9 - R1b*f + x53*x56)/(-R1b - k + x1*x10*x21*x22*x23*x24*x25*x26*x30*x7*x9 - x20 - x49*x53)
    x58 = x52*(-x49*x57 - x56)
    x59 = x17*(B0*k*power*x0*x14*x30*x5*x9*(x45*x57 - x51*x58 + x55) - R1a - k*x47*x58 - k*x57)
    x60 = R2b**(-1.0)
    x61 = x11*x31*x32
    x62 = -R2b + x60*x61
    x63 = -R1b + x0*x1/x62
    x64 = R2a*R2b
    x65 = x62*x63
    x66 = x64*x65
    x67 = R2a**(-1.0)
    x68 = -R2a + x28*x67
    x69 = x64*x68
    x70 = x69*(-R1a + x0*x1/x68)
    x71 = x0*x1
    x72 = x62*x70
    x73 = x63*x72/(-R1a*x66 - R1b*x70 + x65*x69 + x66*(-R1a - x67*x71) + x70*(-R1b - x60*x71) + x72)
    x74 = x3 + x73
    x75 = -x74
    x76 = x75**(-1.0)
    x77 = x19*x76
    x78 = k + x73
    x79 = R2b + x78
    x80 = x77 + x79
    x81 = -x80
    x82 = -x61/x81 - x79
    x83 = R1b + x78
    x84 = x0*x1/x82 - x83
    x85 = x15 + x73
    x86 = x75**(-2.0)
    x87 = -x28*x76 - x74
    x88 = x87**(-2.0)
    x89 = x87**(-1.0)
    x90 = x0*x1*x89 - x85
    x91 = x90**(-1.0)
    x92 = x19*x91
    x93 = -x83 - x92
    x94 = x93**(-1.0)
    x95 = x19*x89
    x96 = x28*x86*x95 + x80
    x97 = -f*x1*x10*x18*x22*x7*x86*x88*x9*x91 + x96
    x98 = -x1*x10*x21*x22*x23*x7*x86*x88*x9*x94/x90**2 + x97
    x99 = x75*x87
    x100 = x90*x99
    x101 = x100*x93
    x102 = x46*x89*x92 + x46
    x103 = -x102*x94
    x104 = x79 + x95
    x105 = -f*x0*x1*x18*x88*x91 + x104
    x106 = -x102*x103 - x105
    x107 = x101*x106
    x108 = x0*x1*x76 - x85
    x109 = x108**(-1.0)
    x110 = x109*x19
    x111 = -x110 - x83
    x112 = x110*x46*x76 + x46
    x113 = f*x0*x1*x109*x18*x86 - x80 + x112**2/x111
    x114 = -x104
    x115 = x114**(-1.0)
    x116 = x33*x89
    x117 = x77*x9
    x118 = x116*x117 + x34
    x119 = x7*x77
    x120 = x116*x119 + x50
    x121 = -x115*x118*x120 - x96
    x122 = -x105
    x123 = x1*x37*x88
    x124 = B0*x91
    x125 = x117*x124
    x126 = x123*x125
    x127 = x119*x124
    x128 = x120 - x123*x127
    x129 = x42*x89
    return x59 + (-x59 + (x1/(x10*x9**2) + 1)**(-1.0))*jnp.exp(tp*(x107*(-x98 - (x103*x127*x129 + x128)*(B0*f*gamma*x18*x76*x89*x9 + B0*gamma*x32 - x102*x125*x129*x94 - x126)/x106)/(x100*x122*(-x97 - x128*(x118 - x126)/x122) - x101*x98 + x107 + x108*x111*x113*x75*(-x79 - x61/x113) + x114*x121*x99*(x0*x1*x115 + x0*x1*x118*x120/(x114**2*x121) - x83) + x75*x81*x82*x84*(-x19/x84 - x85)) + x73))
