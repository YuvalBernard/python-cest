import jax.numpy as jnp
def gen_spectrum_symbolic(R1a, R2a, dwa, R1b, R2b, k, f, dwb, offset, power, B0, gamma, tp):
    x0 = gamma**2
    x1 = power**2
    x2 = f*k
    x3 = R2a + x2
    x4 = -x3
    x5 = x4**(-1.0)
    x6 = B0**2
    x7 = x0*x6
    x8 = -offset
    x9 = dwa + x8
    x10 = -x9
    x11 = x10*x9
    x12 = x11*x7
    x13 = -x12*x5 - x3
    x14 = x13**(-1.0)
    x15 = R1a + x2
    x16 = x0*x1*x14 - x15
    x17 = x16**(-1.0)
    x18 = k**2
    x19 = f*x18
    x20 = x17*x19
    x21 = x4**(-2.0)
    x22 = x14*x19
    x23 = gamma**4
    x24 = x13**(-2.0)
    x25 = R2b + k
    x26 = (f*x1*x10*x17*x18*x21*x23*x24*x6*x9 - x12*x21*x22 - x19*x5 - x25)**(-1.0)
    x27 = dwb + x8
    x28 = -x27
    x29 = B0*gamma
    x30 = x28*x29
    x31 = x10*x29
    x32 = x22*x5
    x33 = gamma**3
    x34 = x1*x33
    x35 = x20*x24*x5
    x36 = x26*(-B0*x10*x34*x35 + x30 + x31*x32)
    x37 = B0*x9
    x38 = power*x0
    x39 = x37*x38
    x40 = x14*x5
    x41 = x39*x40
    x42 = x20*x41
    x43 = gamma*power
    x44 = x14*x43
    x45 = x20*x44 + x43
    x46 = x36*x42 + x45
    x47 = x27*x29
    x48 = x29*x9
    x49 = x34*x37
    x50 = x32*x48 - x35*x49 + x47
    x51 = (f*x0*x1*x17*x18*x24 - x22 - x25 - x36*x50)**(-1.0)
    x52 = B0*x38
    x53 = x51*(-x10*x20*x26*x40*x50*x52 - x45)
    x54 = f**2
    x55 = x16**(-2.0)
    x56 = R1b + k
    x57 = R1a*x17*x2
    x58 = x41*x57
    x59 = x36*x58 + x44*x57
    x60 = (R1a*f*k*x17 - R1a*k**3*x1*x11*x21*x23*x24*x26*x54*x55*x6 - R1b*f + x53*x59)/(k**4*x1*x10*x21*x23*x24*x26*x54*x55*x6*x9 - x20 - x46*x53 - x56)
    x61 = x51*(-x46*x60 - x59)
    x62 = x17*(B0*k*power*x0*x10*x14*x26*x5*(x42*x60 - x50*x61 + x58) - R1a - k*x44*x61 - k*x60)
    x63 = x0*x1
    x64 = offset**2*x7
    x65 = R1a*R2a
    x66 = x63 + x65
    x67 = R1a + R2a
    x68 = -R2a*x66 + x31*(B0*gamma*x67*x9 - R2a*x48)
    x69 = R1b*R2b
    x70 = x63 + x69
    x71 = R1b + R2b
    x72 = -R2b*x70 + x30*(B0*gamma*x27*x71 - R2b*x47)
    x73 = x27*x28
    x74 = x7*x73
    x75 = x68*x72/(x65*x72 + x66*x72 + x68*x69 + x68*x70 + x68*(R2b**2 - x74) + x72*(R2a**2 - x12))
    x76 = k*x47 + k*x48
    x77 = k*x39 + x43*x76
    x78 = k + x75
    x79 = R2b + x78
    x80 = -x79
    x81 = x76*x80
    x82 = k*x80
    x83 = 2*R2b
    x84 = R1b + 3*k
    x85 = 2*x2 + x67
    x86 = 5*x75 + x83 + x84 + x85
    x87 = k*x86 + x82
    x88 = -x3 - x75
    x89 = x48*x88
    x90 = x48*x86 + x89
    x91 = k*x90 + x47*x87 + x81
    x92 = x30*x76
    x93 = x15 + x75
    x94 = -x93
    x95 = 3*x75
    x96 = x83 + x95
    x97 = x84 + x96
    x98 = x94*x97
    x99 = 4*x75
    x100 = x83 + x99
    x101 = x100 + x84
    x102 = x101 + x15
    x103 = R1b + x78
    x104 = -x103
    x105 = 2*k
    x106 = 2*x75
    x107 = x105 + x106
    x108 = x107 + x83
    x109 = x74 + x79*x80
    x110 = x104*x108 + x109
    x111 = 2*x19
    x112 = -2*x0*x1 + x111
    x113 = -x102*x88 - x110 - x112 - x98
    x114 = k*x113 + x80*x87 + x92
    x115 = x2*x76
    x116 = -x49
    x117 = x115 + x116
    x118 = x113*x48 + x117 + x88*x90
    x119 = k*x118 + x114*x47 - x43*x77 + x80*x91
    x120 = -x0*x1
    x121 = x110 + x120
    x122 = -x121 - x19 - x98
    x123 = k*x102 + x82
    x124 = x43*x94
    x125 = x102*x43 + x124
    x126 = -x121
    x127 = k*x104
    x128 = k*x97
    x129 = x127 + x128
    x130 = x43*x80
    x131 = -x108*x43 - x130
    x132 = x30*x80
    x133 = x132 + x30*x79
    x134 = x133*x47
    x135 = -x109
    x136 = x104*x135 + x131*x43 + x134
    x137 = x126*x94 + x129*x2 + x136
    x138 = gamma*power*x125 - x122*x88 - x123*x2 - x137
    x139 = -x137
    x140 = -x105*x63
    x141 = k*x74
    x142 = x123*x80 + x141
    x143 = k*x122 + x140 + x142
    x144 = x111*x43
    x145 = x122*x43 + x125*x94 + x144
    x146 = -x136
    x147 = -k*x63
    x148 = k*x126 + x104*x129 + x147
    x149 = x134*x80
    x150 = -power*x33*x6*x73 + x131*x80 - x135*x43
    x151 = -B0*gamma*x104*x133*x27 + x149 + x150*x43
    x152 = x146*x94 + x148*x2 + x151
    x153 = gamma*power*x145 - x139*x88 - x143*x2 - x152
    x154 = B0*x27
    x155 = x80**2
    x156 = k*x125 + x123*x43 + 2*x127*x43
    x157 = -x152*x88 + x2*(k*x139 + x143*x80 - x156*x43 + x47*(x123*x30 + x30*x82)) - x43*(x139*x43 + x145*x94 + x156*x2)
    x158 = x39*x94
    x159 = x158 + x43*x90
    x160 = x107 + x71
    x161 = k*x160 + x127
    x162 = x161*x2
    x163 = -x104*x79*x94 + x162
    x164 = x19*x43
    x165 = x105 + x15
    x166 = x165 + x71 + x95
    x167 = x124 + x166*x43
    x168 = x167*x94
    x169 = x104*x79
    x170 = x160*x94 + x169
    x171 = x170 + x19
    x172 = -x171
    x173 = x103*x80
    x174 = x104*x43
    x175 = x160*x43 + x174
    x176 = x132 + x160*x30
    x177 = x176*x47
    x178 = x128 + x82
    x179 = x120 + x74
    x180 = x160*x80 + x173 + x179
    x181 = -x180
    x182 = x134 + x135*x94
    x183 = x165 + x96
    x184 = x124 + x183*x43
    x185 = x108*x94 + x109
    x186 = -x185
    x187 = k*x183 + x82
    x188 = x2*x93 + x2*x94
    x189 = k*x188
    x190 = x104*x93 + x19
    x191 = -x190
    x192 = x106 + x15 + x56
    x193 = x174 + x192*x43
    x194 = x166*x47 + x47*x80
    x195 = x190 + x192*x80
    x196 = -x120 - x195
    x197 = -gamma*power*x193 + x189 + x191*x80
    x198 = -x130 - x43*x79
    x199 = -x169 + x63
    x200 = k*x166 + x82
    x201 = x120 + x171
    x202 = -x201
    x203 = x162 + x198*x43 + x199*x94
    x204 = x105 + x85
    x205 = x204 + x71 + x99
    x206 = x166*x88
    x207 = -x201 - x206
    x208 = -gamma*power*x167
    x209 = -x163 - x172*x88 - x208
    x210 = x101 + x3
    x211 = k*x210 + x82
    x212 = x210*x48 + x89
    x213 = k*x212 + x211*x47 + x81
    x214 = -x180 - x19 - x88*x97
    x215 = gamma*power*x175 + x103*x155 - x177 - x178*x2 - x181*x88
    x216 = x100 + x204
    x217 = k*x216 + x82
    x218 = x216*x48 + x89
    x219 = k*x218 + x217*x47 + x81
    x220 = -x120 - x183*x88 - x185 - x19
    x221 = gamma*power*x184 - x182 - x186*x88 - x187*x2
    x222 = x205*x48 + x89
    x223 = -x43*(x158 + x222*x43)
    x224 = x116 + x222*x88
    return x62 + (-x62 + x64/(x63 + x64))*jnp.exp(tp*(x75 + (-x2*(k*x153 + x119*x30 + x80*(k*x138 + x114*x80 + x30*x91)) - x31*(x119*x2 + x153*x48 - x43*(x118*x43 + x159*x94 + x2*x77) + x88*(x118*x88 + x138*x48 - x159*x43 + x2*x91)) - x88*(B0*gamma*x104*x133*x27*x80 - x134*x155 + x151*x94 - x157 - x2*(k*x146 + x104*x148 + x43*(-x129*x43 - x43*x82)) - x43*(x133*x154*x38 + x150*x80 + x47*(B0*gamma*x131*x28 - x28*x52*x80))))/(x157 + x2*(k*x209 + x80*(k*x207 + x80*(k*x205 + x82))) + x2*(k*x215 + x213*x30 + x80*(k*x214 + x211*x80 + x92)) + x2*(k*x221 + x219*x30 + x80*(k*x220 + x217*x80 + x92)) + x2*(k*(-x194*x30 - x196*x80 - x197) + x30*(x123*x47 + x47*x82) + x80*(k*(-x166*x80 - x179 - x195) + x142)) + x31*(x2*x213 + x215*x48 + x88*(x115 + x212*x88 + x214*x48)) + x31*(x209*x48 + x223 + x88*(x207*x48 + x224)) + x31*(x2*x219 + x221*x48 - x43*(x158 + x218*x43) + x88*(x117 + x218*x88 + x220*x48)) + x31*(x2*(k*x222 + x48*x82) + x223 + x48*(-x2*x200 - x202*x88 - x203 - x208) + x88*(x19*x48 + x224 + x48*(-x112 - x170 - x206))) + x88*(gamma*power*(x164 + x168 + x172*x43) + x163*x88 - x2*(x104*x161 - x127*x79)) + x88*(gamma*power*(x104*x175 - x173*x43) - x2*(k*x181 + x141 + x147 + x178*x80) - x47*(-x173*x30 + x176*x80) - x88*(x103*x155 + x175*x43 - x177)) + x88*(gamma*power*(x104*x193 + x164 + x191*x43) + k*x188*x80 - x189*x94 + x197*x80 - x30*(-x154*x34 + x194*x80 + x196*x47)) + x88*(B0*gamma*x133*x27*x94 + gamma*power*(x184*x94 + x186*x43) - x149 + x182*x88 - x2*(k*x186 + x141 + x187*x80)) + x88*(gamma*power*x198*x94 + gamma*power*(x144 + x168 + x202*x43) - x130*x198 - x2*(k*x199 + x104*x161 + x147) - x2*(k*x202 + x140 + x200*x80) + x203*x88))))
